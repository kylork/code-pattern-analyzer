"""
Utility functions for working with visualizations.
"""
import os
import logging
import webbrowser
import subprocess
import time
from pathlib import Path
import tempfile
import shutil

logger = logging.getLogger(__name__)

def open_visualization_in_browser(html_path):
    """
    Opens an HTML visualization file in the default browser.
    
    Args:
        html_path (str): Path to the HTML file
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        html_path = Path(html_path).resolve()
        if not html_path.exists():
            logger.error(f"Visualization file does not exist: {html_path}")
            return False
            
        # Convert to file URL
        file_url = f"file://{html_path}"
        logger.info(f"Opening visualization at: {file_url}")
        
        # Try to open in browser
        webbrowser.open(file_url)
        return True
    except Exception as e:
        logger.error(f"Failed to open visualization: {str(e)}")
        return False

def start_visualization_server(directory_path, port=8000, timeout=2):
    """
    Starts a temporary HTTP server to serve visualization files.
    
    Args:
        directory_path (str): Directory containing visualization files
        port (int): Port to use for the server
        timeout (int): Timeout in seconds to wait for server to start
        
    Returns:
        tuple: (process, url) or (None, None) if failed
    """
    try:
        directory_path = Path(directory_path).resolve()
        if not directory_path.is_dir():
            logger.error(f"Directory does not exist: {directory_path}")
            return None, None
            
        # Start HTTP server as a subprocess
        cmd = ["python3", "-m", "http.server", str(port)]
        process = subprocess.Popen(
            cmd, 
            cwd=str(directory_path),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Wait for server to start
        time.sleep(timeout)
        
        # Check if process is still running
        if process.poll() is not None:
            stdout, stderr = process.communicate()
            logger.error(f"Server failed to start: {stderr.decode()}")
            return None, None
            
        url = f"http://localhost:{port}"
        logger.info(f"Visualization server running at {url}")
        return process, url
    except Exception as e:
        logger.error(f"Failed to start visualization server: {str(e)}")
        return None, None

def create_visualization_bundle(html_path, output_dir=None):
    """
    Creates a self-contained directory with the visualization and a simple
    README explaining how to view it.
    
    Args:
        html_path (str): Path to the HTML visualization file
        output_dir (str, optional): Directory to create the bundle in.
            If None, creates a temporary directory.
    
    Returns:
        str: Path to the created bundle directory
    """
    try:
        html_path = Path(html_path).resolve()
        if not html_path.exists():
            logger.error(f"Visualization file does not exist: {html_path}")
            return None
            
        # Create output directory
        if output_dir:
            bundle_dir = Path(output_dir) / f"{html_path.stem}_bundle"
        else:
            bundle_dir = Path(tempfile.mkdtemp(prefix="visualization_"))
            
        os.makedirs(bundle_dir, exist_ok=True)
        
        # Copy HTML file
        dest_path = bundle_dir / html_path.name
        shutil.copy2(html_path, dest_path)
        
        # Create README
        readme_path = bundle_dir / "README.txt"
        with open(readme_path, "w") as f:
            f.write(f"""
Code Pattern Analyzer Visualization
===================================

This directory contains a visualization generated by the Code Pattern Analyzer.

To view the visualization:

1. Open the HTML file ({html_path.name}) in a web browser
   
   OR
   
2. From a command line, run:
   python3 -m http.server
   
   Then open your browser and go to:
   http://localhost:8000/{html_path.name}

The visualization is interactive:
- You can zoom in/out and drag components
- Click on a component to see its code
- Hover over connections to see relationships
""")
        
        logger.info(f"Created visualization bundle at: {bundle_dir}")
        return str(bundle_dir)
    except Exception as e:
        logger.error(f"Failed to create visualization bundle: {str(e)}")
        return None